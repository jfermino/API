/*
 * API de Livro
 *
 * Exemplo de uma API de Livro
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juliofermino2009@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class LivrosApiController : Controller
    { 
        /// <summary>
        /// Busca o livro por autor
        /// </summary>
        /// <remarks>Retorna apenas os livros do autor informada</remarks>
        /// <param name="autorId">lista todos os livros de acordo com o autor informado</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">ID invalido</response>
        /// <response code="404">Livro ou autor não encontrado</response>
        [HttpGet]
        [Route("/JulioFermino2/Livraria/1.0.0/livros/autores/{autorId}")]
        [ValidateModelState]
        [SwaggerOperation("GetLivrotByAutorId")]
        [SwaggerResponse(statusCode: 200, type: typeof(Livros), description: "successful operation")]
        public virtual IActionResult GetLivrotByAutorId([FromRoute][Required]long? autorId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Livros));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "{\n  \"categoria\" : {\n    \"nome\" : \"Romance\",\n    \"id\" : 10\n  },\n  \"nome\" : \"A cabana\",\n  \"id\" : 17,\n  \"autores\" : {\n    \"nome\" : \"Julio Fermino\",\n    \"id\" : 29\n  },\n  \"dataLancamento\" : \"1995-09-07T00:00:00.000Z\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Livros>(exampleJson)
            : default(Livros);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Busca o livro por Categoria
        /// </summary>
        /// <remarks>Retorna apenas os livros da categoria informada</remarks>
        /// <param name="categoriaId">Id da categoria do livro a ser retornado</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">ID invalido</response>
        /// <response code="404">Livro ou categoria não encontrado</response>
        [HttpGet]
        [Route("/JulioFermino2/Livraria/1.0.0/livros/categorias/{categoriaId}")]
        [ValidateModelState]
        [SwaggerOperation("GetLivrotByCategoryId")]
        [SwaggerResponse(statusCode: 200, type: typeof(Livros), description: "successful operation")]
        public virtual IActionResult GetLivrotByCategoryId([FromRoute][Required]long? categoriaId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Livros));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "{\n  \"categoria\" : {\n    \"nome\" : \"Romance\",\n    \"id\" : 10\n  },\n  \"nome\" : \"A cabana\",\n  \"id\" : 17,\n  \"autores\" : {\n    \"nome\" : \"Julio Fermino\",\n    \"id\" : 29\n  },\n  \"dataLancamento\" : \"1995-09-07T00:00:00.000Z\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Livros>(exampleJson)
            : default(Livros);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Busca o livro por ID
        /// </summary>
        /// <remarks>Retorna apenas um livro</remarks>
        /// <param name="id">ID do livro a ser retornado</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">ID invalido</response>
        /// <response code="404">Livro não encontrado</response>
        [HttpGet]
        [Route("/JulioFermino2/Livraria/1.0.0/livros/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetLivrotById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Livros), description: "successful operation")]
        public virtual IActionResult GetLivrotById([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Livros));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "{\n  \"categoria\" : {\n    \"nome\" : \"Romance\",\n    \"id\" : 10\n  },\n  \"nome\" : \"A cabana\",\n  \"id\" : 17,\n  \"autores\" : {\n    \"nome\" : \"Julio Fermino\",\n    \"id\" : 29\n  },\n  \"dataLancamento\" : \"1995-09-07T00:00:00.000Z\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Livros>(exampleJson)
            : default(Livros);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retorna todos os livros cadastrados de acordo com o status
        /// </summary>
        /// <remarks>Ao passar as opções apropriadas, é retornado todos os livros por status </remarks>
        /// <param name="status">Valores de status que precisam ser considerados para o filtro</param>
        /// <param name="limite">O maximo de registro que pode ser retornado</param>
        /// <response code="200">critérios de correspondência de resultados de pesquisa</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/JulioFermino2/Livraria/1.0.0/livros/status")]
        [ValidateModelState]
        [SwaggerOperation("SearchLivrosByStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Livros>), description: "critérios de correspondência de resultados de pesquisa")]
        public virtual IActionResult SearchLivrosByStatus([FromQuery][Required()]List<string> status, [FromQuery]int? limite)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Livros>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "[ {\n  \"categoria\" : {\n    \"nome\" : \"Romance\",\n    \"id\" : 10\n  },\n  \"nome\" : \"A cabana\",\n  \"id\" : 17,\n  \"autores\" : {\n    \"nome\" : \"Julio Fermino\",\n    \"id\" : 29\n  },\n  \"dataLancamento\" : \"1995-09-07T00:00:00.000Z\"\n}, {\n  \"categoria\" : {\n    \"nome\" : \"Romance\",\n    \"id\" : 10\n  },\n  \"nome\" : \"A cabana\",\n  \"id\" : 17,\n  \"autores\" : {\n    \"nome\" : \"Julio Fermino\",\n    \"id\" : 29\n  },\n  \"dataLancamento\" : \"1995-09-07T00:00:00.000Z\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Livros>>(exampleJson)
            : default(List<Livros>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
